#!/usr/bin/env php
<?php

require __DIR__ . DIRECTORY_SEPARATOR . 'Source' . DIRECTORY_SEPARATOR . 'Str.php';
require __DIR__ . DIRECTORY_SEPARATOR . 'Source' . DIRECTORY_SEPARATOR . 'FileManager' . DIRECTORY_SEPARATOR . 'Path.php';
require __DIR__ . DIRECTORY_SEPARATOR . 'Source' . DIRECTORY_SEPARATOR . 'FileManager' . DIRECTORY_SEPARATOR . 'Address.php';

use Saeghe\Saeghe\FileManager\Address;

spl_autoload_register(function ($class) {
    $classMap = [
        'Saeghe\Saeghe\Git\Repository' => Address::from_string(__DIR__ . '/Source/Git/Repository.php')->to_string(),
        'Saeghe\Saeghe\Config' => Address::from_string(__DIR__ . '/Source/Config.php')->to_string(),
        'Saeghe\Saeghe\Meta' => Address::from_string(__DIR__ . '/Source/Meta.php')->to_string(),
        'Saeghe\Saeghe\Package' => Address::from_string(__DIR__ . '/Source/Package.php')->to_string(),
        'Saeghe\Saeghe\Project' => Address::from_string(__DIR__ . '/Source/Project.php')->to_string(),
    ];

    require_once $classMap[$class];
});

require Address::from_string(__DIR__ . '/Packages/saeghe/cli/Source/IO/Read.php')->to_string();
require Address::from_string(__DIR__ . '/Packages/saeghe/cli/Source/IO/Write.php')->to_string();
require Address::from_string(__DIR__ . '/Source/PhpFile.php')->to_string();
require Address::from_string(__DIR__ . '/Source/FileManager/File.php')->to_string();
require Address::from_string(__DIR__ . '/Source/FileManager/Directory.php')->to_string();
require Address::from_string(__DIR__ . '/Source/FileManager/FileType/Json.php')->to_string();
require Address::from_string(__DIR__ . '/Source/Git/GitHub.php')->to_string();
require Address::from_string(__DIR__ . '/Source/Commands/Add.php')->to_string();
require Address::from_string(__DIR__ . '/Source/Commands/Build.php')->to_string();
require Address::from_string(__DIR__ . '/Source/Commands/Credential.php')->to_string();
require Address::from_string(__DIR__ . '/Source/Commands/Flush.php')->to_string();
require Address::from_string(__DIR__ . '/Source/Commands/Help.php')->to_string();
require Address::from_string(__DIR__ . '/Source/Commands/Init.php')->to_string();
require Address::from_string(__DIR__ . '/Source/Commands/Install.php')->to_string();
require Address::from_string(__DIR__ . '/Source/Commands/Man.php')->to_string();
require Address::from_string(__DIR__ . '/Source/Commands/Migrate.php')->to_string();
require Address::from_string(__DIR__ . '/Source/Commands/Remove.php')->to_string();
require Address::from_string(__DIR__ . '/Source/Commands/Update.php')->to_string();
require Address::from_string(__DIR__ . '/Source/Commands/Version.php')->to_string();
require Address::from_string(__DIR__ . '/Source/Commands/Watch.php')->to_string();

use Saeghe\Cli\IO\Read;
use Saeghe\Saeghe\Project;
use function Saeghe\Saeghe\FileManager\Directory\delete_recursive;
use function Saeghe\Saeghe\FileManager\Directory\flush;

$command = Read\command() ?? Read\parameter('command');

if (is_null($command)) {
    $command = Read\option('v') || Read\option('version') ? 'version' : (Read\option('man') ? 'man' : 'help');
}

$project = Read\parameter('project', '');

$project = makeProject(
    strlen($project) ? getcwd() . '/' . $project . '/' : getcwd() . '/',
    $command === 'build' ? Read\argument(2, 'development') : 'development'
);

match ($command) {
    'add' => \Saeghe\Saeghe\Commands\Add\run($project),
    'build' => \Saeghe\Saeghe\Commands\Build\run($project),
    'credential' => \Saeghe\Saeghe\Commands\Credential\run($project),
    'flush' => \Saeghe\Saeghe\Commands\Flush\run($project),
    'init' => \Saeghe\Saeghe\Commands\Init\run($project),
    'install' => \Saeghe\Saeghe\Commands\Install\run($project),
    'man' => \Saeghe\Saeghe\Commands\Man\run($project),
    'migrate' => \Saeghe\Saeghe\Commands\Migrate\run($project),
    'remove' => \Saeghe\Saeghe\Commands\Remove\run($project),
    'update' => \Saeghe\Saeghe\Commands\Update\run($project),
    'version' => \Saeghe\Saeghe\Commands\Version\run($project),
    'watch' => \Saeghe\Saeghe\Commands\Watch\run($project),
    default => \Saeghe\Saeghe\Commands\Help\run($project),
};

function makeProject($projectRoot, $environment): Project
{
    return new Project(
        root: Address::from_string($projectRoot),
        environment: $environment,
        config_file_path: Address::from_string($projectRoot . 'saeghe.config.json'),
        config_lock_file_path: Address::from_string($projectRoot . 'saeghe.config-lock.json'),
        credentials_path: Address::from_string(__DIR__ .'/credentials.json'),
    );
}

function dir_find_or_create(string $path): string
{
    if (! file_exists($path)) {
        mkdir($path);
    }

    return $path;
}

function dir_preserve_copy(string $origin, string $destination): bool
{
    return mkdir($destination, fileperms($origin) & 0x0FFF);
}

function dir_make_recursive(string $path, $permission = 0755): bool
{
    return mkdir($path, $permission, true);
}

function dir_renew(string $path): string
{
    if (file_exists($path)) {
        delete_recursive($path);
    }

    dir_make_recursive($path);

    return $path;
}

function dir_clean(string $path): string
{
    $path = $path . DIRECTORY_SEPARATOR;

    if (! file_exists($path)) {
        dir_make_recursive($path);
    } else {
        flush($path);
    }

    return $path;
}

function file_preserve_modify(string $origin, string $destination, mixed $content): void
{
    file_put_contents($destination, $content);
    chmod($destination, fileperms($origin) & 0x0FFF);
}

function array_insert_after($array, $key, array $additional): array
{
    $keys = array_keys($array);
    $index = array_search($key, $keys);
    $pos = false === $index ? count($array) : $index + 1;

    return array_merge(array_slice($array, 0, $pos), $additional, array_slice($array, $pos));
}

function json_put(string $path, array $content): bool
{
    return file_put_contents($path, json_encode($content, JSON_PRETTY_PRINT) . PHP_EOL) !== false;
}

function all_files_and_directories(string $origin): array
{
    $filesAndDirectories = scandir($origin);

    return array_filter($filesAndDirectories, fn ($fileOrDirectory) => ! in_array($fileOrDirectory, ['.', '..']));
}

function read_lines(string $source): Generator
{
    $fileHandler = @fopen($source, "r");

    if ($fileHandler) {
        while (($line = fgets($fileHandler)) !== false) {
            yield $line;
        }
        if (!feof($fileHandler)) {
            var_dump("Error: unexpected fgets() fail");
        }
        fclose($fileHandler);
    }
}

function intact_copy(string $origin, string $destination)
{
    copy($origin, $destination);
    chmod($destination, fileperms($origin) & 0x0FFF);
}
