#!/usr/bin/env php
<?php

spl_autoload_register(function ($class) {
    $classMap = [
        'Saeghe\Saeghe\Git\Repository' => __DIR__ . '/Source/Git/Repository.php',
        'Saeghe\Saeghe\Config' => __DIR__ . '/Source/Config.php',
        'Saeghe\Saeghe\Meta' => __DIR__ . '/Source/Meta.php',
        'Saeghe\Saeghe\Package' => __DIR__ . '/Source/Package.php',
        'Saeghe\Saeghe\Project' => __DIR__ . '/Source/Project.php',
    ];

    require_once $classMap[$class];
});

require __DIR__ . '/Packages/saeghe/cli/Source/IO/Read.php';
require __DIR__ . '/Packages/saeghe/cli/Source/IO/Write.php';
require __DIR__ . '/Source/Str.php';
require __DIR__ . '/Source/PhpFile.php';
require __DIR__ . '/Source/Git/GitHub.php';
require __DIR__ . '/Source/Commands/Add.php';
require __DIR__ . '/Source/Commands/Build.php';
require __DIR__ . '/Source/Commands/Credential.php';
require __DIR__ . '/Source/Commands/Flush.php';
require __DIR__ . '/Source/Commands/Help.php';
require __DIR__ . '/Source/Commands/Init.php';
require __DIR__ . '/Source/Commands/Install.php';
require __DIR__ . '/Source/Commands/Man.php';
require __DIR__ . '/Source/Commands/Migrate.php';
require __DIR__ . '/Source/Commands/Remove.php';
require __DIR__ . '/Source/Commands/Update.php';
require __DIR__ . '/Source/Commands/Watch.php';

use Saeghe\Cli\IO\Read;
use Saeghe\Saeghe\Project;
use function Saeghe\Saeghe\Providers\GitHub\github_token;

$command = Read\command() ?? Read\parameter('command', 'help');

if ($command === 'help' && Read\option('man')) {
    $command = 'man';
}

$project = Read\parameter('project', '');

$project = makeProject(
    strlen($project) ? $_SERVER['PWD'] . '/' . $project . '/' : $_SERVER['PWD'] . '/',
    $command === 'build' ? Read\argument(2, 'development') : 'development'
);

$credential = json_to_array($project->credentialsPath);
github_token($credential['github.com']['token'] ?? '');

match ($command) {
    'add' => \Saeghe\Saeghe\Commands\Add\run($project),
    'build' => \Saeghe\Saeghe\Commands\Build\run($project),
    'credential' => \Saeghe\Saeghe\Commands\Credential\run($project),
    'flush' => \Saeghe\Saeghe\Commands\Flush\run($project),
    'init' => \Saeghe\Saeghe\Commands\Init\run($project),
    'install' => \Saeghe\Saeghe\Commands\Install\run($project),
    'man' => \Saeghe\Saeghe\Commands\Man\run($project),
    'migrate' => \Saeghe\Saeghe\Commands\Migrate\run($project),
    'remove' => \Saeghe\Saeghe\Commands\Remove\run($project),
    'update' => \Saeghe\Saeghe\Commands\Update\run($project),
    'watch' => \Saeghe\Saeghe\Commands\Watch\run($project),
    default => \Saeghe\Saeghe\Commands\Help\run($project),
};

function makeProject($projectRoot, $environment): Project
{
    return new Project(
        root: $projectRoot,
        environment: $environment,
        configFilePath: $projectRoot . 'saeghe.config.json',
        configLockFilePath: $projectRoot . 'saeghe.config-lock.json',
        credentialsPath: __DIR__ .'/credentials.json',
    );
}

function dir_find_or_create($path)
{
    if (! file_exists($path)) {
        mkdir($path);
    }

    return $path . '/';
}

function dir_preserve_copy($origin, $destination)
{
    return mkdir($destination, fileperms($origin) & 0x0FFF);
}

function dir_make_recursive($path, $permission = 0755)
{
    return mkdir($path, $permission, true);
}

function dir_delete_recursive($path)
{
    shell_exec("rm -fR $path");
}

function dir_renew($path)
{
    if (file_exists($path)) {
        dir_delete_recursive($path);
    }

    dir_make_recursive($path);

    return $path;
}

function dir_clean($path)
{
    $path = $path . '/';

    if (! file_exists($path)) {
        dir_make_recursive($path);
    } else {
        dir_delete_recursive("$path*");
    }

    return $path;
}

function file_preserve_modify($origin, $destination, $content)
{
    file_put_contents($destination, $content);
    chmod($destination, fileperms($origin) & 0x0FFF);
}

function array_insert_after($array, $key, array $additional) {
    $keys = array_keys($array);
    $index = array_search($key, $keys);
    $pos = false === $index ? count($array) : $index + 1;

    return array_merge(array_slice($array, 0, $pos), $additional, array_slice($array, $pos));
}

function array_merge_json($array, $path)
{
    return array_merge($array, json_to_array($path));
}

function json_put($path, array $content)
{
    return file_put_contents($path, json_encode($content, JSON_PRETTY_PRINT) . PHP_EOL) !== false;
}

function json_to_array($path, $default = [])
{
    if (file_exists($path)) {
        return json_decode(json: file_get_contents($path), associative: true, flags: JSON_THROW_ON_ERROR);
    }

    return $default;
}

function all_files_and_directories($origin)
{
    $filesAndDirectories = scandir($origin);

    return array_filter($filesAndDirectories, fn ($fileOrDirectory) => ! in_array($fileOrDirectory, ['.', '..']));
}

function read_lines(string $source): Generator
{
    $fileHandler = @fopen($source, "r");

    if ($fileHandler) {
        while (($line = fgets($fileHandler)) !== false) {
            yield $line;
        }
        if (!feof($fileHandler)) {
            var_dump("Error: unexpected fgets() fail");
        }
        fclose($fileHandler);
    }
}

function intact_copy($origin, $destination)
{
    copy($origin, $destination);
    chmod($destination, fileperms($origin) & 0x0FFF);
}
