<?php

namespace ProjectWithTests\SampleFile;

require_once '$environment_build_path/Source/SampleFile/ClassInSameNamespace.php';
require_once '$environment_build_path/Source/Classes/ClassWithConstant.php';
require_once '$environment_build_path/Source/AnyNamespace/ConstInCompoundNamespace.php';
require_once '$environment_build_path/Packages/saeghe/simple-package/Source/Classes/PackageConst.php';
require_once '$environment_build_path/Source/Helper.php';
require_once '$environment_build_path/Source/AnotherHelper.php';

use ProjectWithTests\TypeClasses\InjectedClassInConstructor;
use ProjectWithTests\TypeClasses\InjectedPublicClassInConstructor;
use Saeghe\SimplePackage\TypeClasses\InjectedClassFromPackageToConstructor;
use ProjectWithTests\TypeClasses\InjectedParameterClass;
use ProjectWithTests\TypeClasses\OtherInjectedParameterClass;
use ProjectWithTests\TypeClasses\ReturnTypeClassA;
use ProjectWithTests\TypeClasses\MultipleTypeA;
use ProjectWithTests\TypeClasses\MultipleTypeB;
use ProjectWithTests\TypeClasses\ReturnTypeClassB;
use ProjectWithTests\TypeClasses\ReturnTypeClassC;
use ProjectWithTests\ClassName\ClassA;
use ProjectWithTests\ClassName\ClassB;
use ProjectWithTests\Classes\NewInstanceClassA;
use Saeghe\SimplePackage\Classes\PackageClass;
use ProjectWithTests\Classes\NewInstanceClassB;
use ProjectWithTests\Classes\NewInstanceClassC;
use ProjectWithTests\Classes\StaticClassA;
use ProjectWithTests\Classes\StaticClassB;
use ProjectWithTests\Classes\StaticClassC;
use ProjectWithTests\Classes\ClassWithConstant;
use Saeghe\SimplePackage\Classes\PackageConst;
use ProjectWithTests\AnyNamespace as CompoundNamespace;
use ProjectWithTests\Attributes\SetUp;
use ProjectWithTests\Helper;
use function ProjectWithTests\AnotherHelper\aFunction;
use const \PHP_EOL;
use function \str_pad;

function init(
    InjectedClassInConstructor $injectedClassInConstructor,
    public InjectedPublicClassInConstructor $injectedPublicClassInConstructor,
    public readonly InjectedClassFromPackageToConstructor $injectedClassA,
) {
}

function method_with_type_parameters(InjectedParameterClass $injectedParameterClass, OtherInjectedParameterClass $otherInjectedParameterClass)
{
}

function method_With_return_type(): ReturnTypeClassA
{
}

function method_with_multiple_type_parameter(MultipleTypeA|MultipleTypeB $parameter)
{
}

function method_with_multiple_return_types(): ReturnTypeClassB|ReturnTypeClassC
{
}

function get_class_name_examples()
{
    $classNameA = ClassA::class;
    $classNameB = ClassInSameNamespace::class;
    if ($var instanceof CLassB::class) {

    }
    $classNameFromCompoundNamespace = CompoundNamespace\ClassName::class;
}

function new_instance_examples()
{
    new self();
    new parent();
    new static();
    $newInstance = new NewInstanceClassA();
    $newFromPackage = new PackageClass();
    $newInstanceWithParameter = new NewInstanceClassB(new NewInstanceClassC);
    $newInSameNamespace = new InstanceFromClassInSameNamespace();
    $newInstanceClassWithoutUse = new ProjectWithTests\SubDirectory\ClassUseAnotherClass();
    $phpClassInstance = new \ArrayObject();
    $newInstanceForClassInCompoundNamespace = new CompoundNamespace\ClassA();
}

function static_call_examples()
{
    $staticCall = StaticClassA::call();
    $callInInnerClass = StaticClassB::run(StaticClassC::output($staticCall));
    $staticCallToCompoundNamespaceClass = CompoundNamespace\StaticClass::handle();
    \Locale::setDefault('en');
}

function call_functions()
{
    str_replace('', '', '');
    \strlen($var);
}

function constants_examples()
{
    self::ConstA;
    static::ConstB;
    ClassInSameNamespace::ConstC;
    ClassWithConstant::ConstD;
    CompoundNamespace\ConstInCompoundNamespace::ConstE;
    PackageConst::ConstF;
    \ReflectionProperty\IS_PUBLIC;
    \PHP_EOL;
    str_pad();
    str_contains();
    \array_walk();
    Helper\aFunction();
}

#[SetUp]
public function use_attributes_example()
{

}
